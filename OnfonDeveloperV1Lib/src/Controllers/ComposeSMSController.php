<?php

declare(strict_types=1);

/*
 * OnfonDeveloperV1Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace OnfonDeveloperV1Lib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\QueryParam;
use CoreInterfaces\Core\Request\RequestMethod;
use OnfonDeveloperV1Lib\Exceptions\ApiException;
use OnfonDeveloperV1Lib\Models\SendFromFileStep3Request;
use OnfonDeveloperV1Lib\Models\StartSendingRequest;

class ComposeSMSController extends BaseController
{
    /**
     * This API tells you how many contacts are in given file.
     *
     * Send `HTTP POST` request to the following endpoints:
     *
     * > Testing: https://sandbox.onfonmedia.co.ke}/v1/onfonapps/sms:importContact
     * > Production: https://apis.onfonmedia.co.ke}/v1/onfonapps/sms:importContact
     *
     * This API does not save the data on the server:
     *
     * ###### Request parameters
     *
     * In addition to the [Authorization headers](/docs/request_headers), the API allows following
     * parameters to be passed as `Form Data` when calling the endpoint
     *
     * | Description
     * |
     * | ---------------------------------------------------------------------------------------------------
     * ------------------- |
     * | **file** `File` `Required` <br>The file containing contacts to import. The allowed file formats
     * are `.csv` and `.xlsx` |
     *
     * ###### API Response
     *
     * ```
     * {
     * "totalRows": 1256,
     * "fileName": "UsersFile.csv"
     * }
     * ```
     *
     * @param string $file File containing contacts
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function importContacts(string $file): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/onfonapps/sms:importContact')
            ->auth('global')
            ->parameters(FormParam::init('file', $file));

        $this->execute($_reqBuilder);
    }

    /**
     * This API tells lets you compose SMS that will be sent to destination(s)
     *
     * Send `HTTP POST` request to the following endpoints:
     *
     * > Testing: https://sandbox.onfonmedia.co.ke}/v1/onfonapps/sms:compose
     * > Production: https://apis.onfonmedia.co.ke}/v1/onfonapps/sms:compose
     *
     * This API will save the data on the server in a `transactional` manner.
     *
     * ###### Request parameters
     *
     * In addition to the [Authorization headers](/docs/request_headers), the API allows following
     * parameters to be passed as `Form Data` when calling the endpoint
     *
     * | Description
     *
     * |
     * | ---------------------------------------------------------------------------------------------------
     * -----------------------------------------------------------------------------------------------------
     * ---------------------------------- |
     * | **file** `File` `Optional` <br>The file containing `msisdn` destinations. The allowed file formats
     * are `.csv` and `.xlsx`
     * |
     * | **fileExists** `String` `Optional` <br>The allowed values are `YES` and `NO`. If the value is
     * `YES`, then the server will read from **file** above. If you pass any other value other than `YES`,
     * the server will not read from the _file_ |
     * | **message** `String` `Required` <br>The message that is to be sent. You can create a message with
     * tenmplates, which in that case will be read and parsed from _file_ param
     * |
     * | **senderName** `Aphanumeric` `Required` <br>The `sender id` or `shortcode` to be used
     *
     * |
     * | **senderName** `Aphanumeric` `Required` <br>The `sender id` or `shortcode` to be used
     *
     * |
     * | **campaignName** `String` `Required` <br>The name that will identify the campaign.
     *
     * |
     * | **campaignDescription** `String` `Optional` <br>The description for the campaign.
     *
     * |
     * | **contacts** `String` `Optional` <br>Comma separate phone numbers (msisn) to receive the message.
     *
     * |
     * | **groupIds** `Int` `Optional` <br>Comma separate contact `group ids`. The `contacts` belonging to
     * the `group ids` will receive the message.
     * |
     * | **removeDuplicate** `String` `Optional` <br>The allowed values are `YES` and `NO`. If the value is
     * `YES`, then duplicates `msisdn` will be removed, if `NO` then will send to all `msisdn`s even if
     * there are duplicates                   |
     * | **removeDuplicate** `String` `Optional` <br>The allowed values are `YES` and `NO`. If the value is
     * `YES`, then duplicates `msisdn` will be removed, if `NO` then will send to all `msisdn`s even if
     * there are duplicates                   |
     * | **schedule** `String` `Optional` <br>The allowed values are `YES` and `NO`. If the value is `YES`,
     * then message will be scheduled and `scheduleUTCSeconds` param _must_ be passed
     * |
     * | **scheduleUTCSeconds** `Number` `Optional` <br>Future UTC Unix timestamp in seconds when message
     * will be sent
     * |
     *
     * ###### API Response
     *
     * ```
     * {
     * "totalRows": 1256,
     * "fileName": "UsersFile.csv"
     * }
     * ```
     *
     * @param string $file if fileExists is YES, then this field is mandatory
     * @param string $fileExists YES or NO (Not mandatory)
     * @param string $message Message body
     * @param string $senderName The `sender id` or `shortcode` to be
     * @param string $campaignName name of campaign to be created
     * @param string $campaignDescription description of campaign to be created
     * @param int $contacts phone numbers comma separated
     * @param string $groupIds group ids comma separated
     * @param string $removeDuplicate YES or NO
     * @param string $flash YES or NO
     * @param string $schedule if YES then utcTimestampSeconds is required
     * @param int $scheduleUTCSeconds Future UTC time in seconds
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function composeSMS(
        string $file,
        string $fileExists,
        string $message,
        string $senderName,
        string $campaignName,
        string $campaignDescription,
        int $contacts,
        string $groupIds,
        string $removeDuplicate,
        string $flash,
        string $schedule,
        int $scheduleUTCSeconds
    ): void {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/onfonapps/sms:compose')
            ->auth('global')
            ->parameters(
                FormParam::init('file', $file),
                FormParam::init('fileExists', $fileExists),
                FormParam::init('message', $message),
                FormParam::init('senderName', $senderName),
                FormParam::init('campaignName', $campaignName),
                FormParam::init('campaignDescription', $campaignDescription),
                FormParam::init('contacts', $contacts),
                FormParam::init('groupIds', $groupIds),
                FormParam::init('removeDuplicate', $removeDuplicate),
                FormParam::init('flash', $flash),
                FormParam::init('schedule', $schedule),
                FormParam::init('scheduleUTCSeconds', $scheduleUTCSeconds)
            );

        $this->execute($_reqBuilder);
    }

    /**
     * @param StartSendingRequest $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function startSending(StartSendingRequest $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/onfonapps/sms:sendCampaign')
            ->auth('global')
            ->parameters(BodyParam::init($body));

        $this->execute($_reqBuilder);
    }

    /**
     * @param int $pageSize
     * @param string $pageToken
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listMtMessages(int $pageSize, string $pageToken): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/v1/onfonapps/sms/mt')
            ->auth('global')
            ->parameters(QueryParam::init('pageSize', $pageSize), QueryParam::init('pageToken', $pageToken));

        $this->execute($_reqBuilder);
    }

    /**
     * @param int $pageSize
     * @param string $pageToken
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listMOMessages(int $pageSize, string $pageToken): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/v1/onfonapps/sms/mo')
            ->auth('global')
            ->parameters(QueryParam::init('pageSize', $pageSize), QueryParam::init('pageToken', $pageToken));

        $this->execute($_reqBuilder);
    }

    /**
     * @param string $file
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function sendFromFileStep1(string $file): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/onfonapps/sms:sendFromFileStep1')
            ->auth('global')
            ->parameters(FormParam::init('file', $file));

        $this->execute($_reqBuilder);
    }

    /**
     * @param string $message
     * @param string $senderName
     * @param string $uploadId
     * @param string $campaignName
     * @param string $msisdnField
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function sendFromFileStep2(
        string $message,
        string $senderName,
        string $uploadId,
        string $campaignName,
        string $msisdnField
    ): void {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/onfonapps/sms:sendFromFileStep2')
            ->auth('global')
            ->parameters(
                FormParam::init('message', $message),
                FormParam::init('senderName', $senderName),
                FormParam::init('uploadId', $uploadId),
                FormParam::init('campaignName', $campaignName),
                FormParam::init('msisdnField', $msisdnField)
            );

        $this->execute($_reqBuilder);
    }

    /**
     * @param SendFromFileStep3Request $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function sendFromFileStep3(SendFromFileStep3Request $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/onfonapps/sms:sendSMS')
            ->auth('global')
            ->parameters(BodyParam::init($body));

        $this->execute($_reqBuilder);
    }

    /**
     * @param string $message
     * @param int $uploadId
     * @param string $msisdnField
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function sendFromFilePreview(string $message, int $uploadId, string $msisdnField): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/onfonapps/sms:sendFromFilePreview')
            ->auth('global')
            ->parameters(
                QueryParam::init('message', $message),
                QueryParam::init('uploadId', $uploadId),
                QueryParam::init('msisdnField', $msisdnField)
            );

        $this->execute($_reqBuilder);
    }
}
