<?php

declare(strict_types=1);

/*
 * OnfonDeveloperV1Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace OnfonDeveloperV1Lib\Tests\Controllers;

use Core\TestCase\TestParam;
use OnfonDeveloperV1Lib\Controllers\ComposeSMSController;
use OnfonDeveloperV1Lib\Exceptions;
use OnfonDeveloperV1Lib\Models;

class ComposeSMSControllerTest extends BaseTestController
{
    /**
     * @var ComposeSMSController ComposeSMSController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getComposeSMSController();
    }

    public function testImportContacts()
    {
        // Parameters for the API call
        $file = '';

        // Perform API call
        try {
            self::$controller->importContacts($file);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testComposeSMS()
    {
        // Parameters for the API call
        $file = '';
        $fileExists = 'NO';
        $message = 'Sep 7 2022 is such a beutiful day';
        $senderName = 'gideon';
        $campaignName = 'Aug2022';
        $campaignDescription =
            'Another test campaign';
        $contacts = 254700000000;
        $groupIds = '';
        $removeDuplicate =
            'YES';
        $flash = 'NO';
        $schedule = 'NO';
        $scheduleUTCSeconds =
            1655107192;

        // Perform API call
        try {
            self::$controller->composeSMS(
                $file,
                $fileExists,
                $message,
                $senderName,
                $campaignName,
                $campaignDescription,
                $contacts,
                $groupIds,
                $removeDuplicate,
                $flash,
                $schedule,
                $scheduleUTCSeconds
            );
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testStartSending()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"campaignId\": \"{{campaignId}}\"\r\n}",
            Models\StartSendingRequest::class
        );

        // Perform API call
        try {
            self::$controller->startSending($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testListMtMessages()
    {
        // Parameters for the API call
        $pageSize = 5;
        $pageToken = '';

        // Perform API call
        try {
            self::$controller->listMtMessages($pageSize, $pageToken);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testListMOMessages()
    {
        // Parameters for the API call
        $pageSize = 100;
        $pageToken = '';

        // Perform API call
        try {
            self::$controller->listMOMessages($pageSize, $pageToken);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testSendFromFileStep1()
    {
        // Parameters for the API call
        $file = '';

        // Perform API call
        try {
            self::$controller->sendFromFileStep1($file);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testSendFromFileStep2()
    {
        // Parameters for the API call
        $message = 'Hello ##MobileNumber##. Your order ##Order##, please pay ##Amount##';
        $senderName = 'Onfon';
        $uploadId = '{{uploadId}}';
        $campaignName = 'T234';
        $msisdnField = 'MobileNumber';

        // Perform API call
        try {
            self::$controller->sendFromFileStep2($message, $senderName, $uploadId, $campaignName, $msisdnField);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testSendFromFileStep3()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"campaignId\": \"{{campaignId}}\"\r\n}",
            Models\SendFromFileStep3Request::class
        );

        // Perform API call
        try {
            self::$controller->sendFromFileStep3($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testSendFromFilePreview()
    {
        // Parameters for the API call
        $message = 'Hello ##MobileNumber##. Your order ##Order##, please pay ##Amount##';
        $uploadId = 73;
        $msisdnField = 'MobileNumber';

        // Perform API call
        try {
            self::$controller->sendFromFilePreview($message, $uploadId, $msisdnField);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }
}
