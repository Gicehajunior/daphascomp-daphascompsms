<?php

declare(strict_types=1);

/*
 * OnfonDeveloperV1Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace OnfonDeveloperV1Lib\Tests\Controllers;

use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;
use OnfonDeveloperV1Lib\Controllers\ContactsController;
use OnfonDeveloperV1Lib\Exceptions;
use OnfonDeveloperV1Lib\Models;

class ContactsControllerTest extends BaseTestController
{
    /**
     * @var ContactsController ContactsController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getContactsController();
    }

    public function testCreateContact()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"contact\": {\r\n    \"phone\": \"254716000000\",\r\n    \"groupId\": \"29\"\r\n  }\r\n}",
            Models\CreateContactRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createContact($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Content-Length'] = ['206', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['Grpc-Metadata-Content-Type'] = ['application/grpc', false];
        $headers['Vary'] = ['Origin', false];
        $headers['Date'] = ['Tue, 04 Oct 2022 09:11:02 GMT', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];
        $headers['X-Kong-Upstream-Latency'] = ['10', false];
        $headers['X-Kong-Proxy-Latency'] = ['1', false];
        $headers['Via'] = ['kong/2.8.1', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"contactId\": \"19390485\",\r\n  \"clientId\": \"3\",\r\n  \"client\":" .
                " null,\r\n  \"phone\": \"254716000000\",\r\n  \"names\": \"\",\r\n  \"email\": " .
                "\"\",\r\n  \"groupId\": \"2\",\r\n  \"group\": null,\r\n  \"createDate\": \"202" .
                "2-10-04T09:11:02Z\",\r\n  \"updateDate\": \"2022-10-04T09:11:02Z\"\r\n}"
            )))
            ->assert();
    }

    public function testListContacts()
    {
        // Parameters for the API call
        $pageSize = 2;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->listContacts($pageSize);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Content-Length'] = ['667', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['Grpc-Metadata-Content-Type'] = ['application/grpc', false];
        $headers['Vary'] = ['Origin', false];
        $headers['Date'] = ['Tue, 04 Oct 2022 10:00:37 GMT', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];
        $headers['X-Kong-Upstream-Latency'] = ['12', false];
        $headers['X-Kong-Proxy-Latency'] = ['1', false];
        $headers['Via'] = ['kong/2.8.1', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"nextPageToken\": \"MTkzOTA0ODY=\",\r\n  \"contacts\": [\r\n    {\r\n " .
                "     \"contactId\": \"19390487\",\r\n      \"clientId\": \"3\",\r\n      \"clie" .
                "nt\": {\r\n        \"clientId\": \"3\",\r\n        \"clientNames\": \"John Doe" .
                "\",\r\n        \"clientStatus\": \"ACTIVE\"\r\n      },\r\n      \"phone\": \"2" .
                "54716000000\",\r\n      \"names\": \"\",\r\n      \"email\": \"\",\r\n      \"g" .
                "roupId\": \"29\",\r\n      \"group\": {\r\n        \"groupId\": \"29\",\r\n    " .
                "    \"groupName\": \"Test group\"\r\n      },\r\n      \"createDate\": \"2022-1" .
                "0-04T09:59:24Z\",\r\n      \"updateDate\": \"2022-10-04T09:59:24Z\"\r\n    },\r" .
                "\n    {\r\n      \"contactId\": \"19390486\",\r\n      \"clientId\": \"3\",\r\n" .
                "      \"client\": {\r\n        \"clientId\": \"3\",\r\n        \"clientNames\":" .
                " \"John Doe\",\r\n        \"clientStatus\": \"ACTIVE\"\r\n      },\r\n      \"p" .
                "hone\": \"254716484395\",\r\n      \"names\": \"\",\r\n      \"email\": \"\",\r" .
                "\n      \"groupId\": \"29\",\r\n      \"group\": {\r\n        \"groupId\": \"29" .
                "\",\r\n        \"groupName\": \"Test group\"\r\n      },\r\n      \"createDate" .
                "\": \"2022-10-04T09:58:21Z\",\r\n      \"updateDate\": \"2022-10-04T09:58:21Z\"" .
                "\r\n    }\r\n  ],\r\n  \"collectionCount\": 3\r\n}"
            )))
            ->assert();
    }

    public function testGetContact()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->getContact();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Content-Length'] = ['300', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['Grpc-Metadata-Content-Type'] = ['application/grpc', false];
        $headers['Vary'] = ['Origin', false];
        $headers['Date'] = ['Tue, 04 Oct 2022 10:05:28 GMT', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];
        $headers['X-Kong-Upstream-Latency'] = ['5', false];
        $headers['X-Kong-Proxy-Latency'] = ['1', false];
        $headers['Via'] = ['kong/2.8.1', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"contactId\": \"19390487\",\r\n  \"clientId\": \"3\",\r\n  \"client\":" .
                " {\r\n    \"clientId\": \"3\",\r\n    \"clientNames\": \"John Doe\",\r\n    \"c" .
                "lientStatus\": \"ACTIVE\"\r\n  },\r\n  \"phone\": \"254716000000\",\r\n  \"name" .
                "s\": \"\",\r\n  \"email\": \"\",\r\n  \"groupId\": \"29\",\r\n  \"group\": {\r" .
                "\n    \"groupId\": \"29\",\r\n    \"groupName\": \"Test group\"\r\n  },\r\n  \"" .
                "createDate\": \"2022-10-04T09:59:24Z\",\r\n  \"updateDate\": \"2022-10-04T09:59" .
                ":24Z\"\r\n}"
            )))
            ->assert();
    }

    public function testDeleteContact()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->deleteContact();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Content-Length'] = ['2', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['Grpc-Metadata-Content-Type'] = ['application/grpc', false];
        $headers['Vary'] = ['Origin', false];
        $headers['Date'] = ['Tue, 04 Oct 2022 10:08:54 GMT', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];
        $headers['X-Kong-Upstream-Latency'] = ['10', false];
        $headers['X-Kong-Proxy-Latency'] = ['1', false];
        $headers['Via'] = ['kong/2.8.1', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object('{}')))
            ->assert();
    }

    public function testUpdateContact()
    {
        // Parameters for the API call
        $body = TestParam::object(
            "{\r\n  \"contact\": {\r\n    \"names\": \"John Cena\"\r\n  }\r\n}",
            Models\UpdateContactRequest::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->updateContact($body);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Content-Length'] = ['187', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['Grpc-Metadata-Content-Type'] = ['application/grpc', false];
        $headers['Vary'] = ['Origin', false];
        $headers['Date'] = ['Tue, 04 Oct 2022 10:12:12 GMT', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];
        $headers['X-Kong-Upstream-Latency'] = ['10', false];
        $headers['X-Kong-Proxy-Latency'] = ['1', false];
        $headers['Via'] = ['kong/2.8.1', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"contactId\": \"0\",\r\n  \"clientId\": \"0\",\r\n  \"client\": null," .
                "\r\n  \"phone\": \"\",\r\n  \"names\": \"John Cena\",\r\n  \"email\": \"\",\r\n" .
                "  \"groupId\": \"0\",\r\n  \"group\": null,\r\n  \"createDate\": \"0001-01-01T0" .
                "0:00:00Z\",\r\n  \"updateDate\": \"2022-10-04T10:12:12Z\"\r\n}"
            )))
            ->assert();
    }

    public function testUploadContacts()
    {
        // Parameters for the API call
        $groupId = 29;
        $contacts = '';

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->uploadContacts($groupId, $contacts);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Content-Length'] = ['36', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['Vary'] = ['Origin', false];
        $headers['Date'] = ['Tue, 04 Oct 2022 10:38:56 GMT', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];
        $headers['X-Kong-Upstream-Latency'] = ['64', false];
        $headers['X-Kong-Proxy-Latency'] = ['7', false];
        $headers['Via'] = ['kong/2.8.1', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(
                KeysBodyMatcher::init(TestParam::object("{\r\n  \"message\": \"successfully uploaded\"\r\n}"))
            )
            ->assert();
    }
}
